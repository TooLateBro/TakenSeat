services:
  redis-stack:
    image: redis/redis-stack
    container_name: redis-stack-compose
    restart: always
    command: >
      redis-server
      --requirepass systempass
      --notify-keyspace-events Ex
    ports:
      - 6379:6379
      - 8001:8001

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    environment:
      - ZIPKIN_HTTP_PORT=9411
    restart: always

  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
      # KRaft 모드 설정 (Kafka의 새로운 자체 관리 클러스터 모드)
      KAFKA_CFG_NODE_ID: 1  # 클러스터에서 이 브로커의 노드 ID 설정
      KAFKA_CFG_PROCESS_ROLES: broker,controller  # 이 브로커의 역할을 broker와 controller로 설정
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093  # KRaft 모드에서 사용할 컨트롤러의 퀴럼 설정 (kafka 브로커가 controller 역할 수행)
      # 리스너 구성 - INSIDE(내부), OUTSIDE(외부), CONTROLLER(컨트롤러) 리스너 설정
      KAFKA_CFG_LISTENERS: INSIDE://:29092,OUTSIDE://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://localhost:9092  # 외부에 노출될 리스너 정보
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT,CONTROLLER:PLAINTEXT  # 보안 프로토콜 설정
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER  # 컨트롤러 리스너 이름 설정
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INSIDE  # 브로커 간 통신에 사용할 리스너 이름 설정
      # 토픽 자동 생성 활성화
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      # 클러스터 ID 설정 (KRaft 모드에서 클러스터를 식별하는 ID. ex) Zookeeper 없이 kafka 자체에서 관리하는 모드로 설정)
      KAFKA_KRAFT_CLUSTER_ID: "toolatebro"
      ALLOW_PLAINTEXT_LISTENER: "yes"  # 플레인텍스트 리스너를 허용
    restart: always

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    platform: linux/amd64
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_READONLY: "false"
    depends_on:
      - kafka

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    restart: always

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
      - ~/grafana/config/grafana.ini:/etc/grafana/grafana.ini
    restart: always

  loki:
    image: grafana/loki:3.0.0
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ../loki-config.yml:/mnt/config/loki-config.yml
    command: -config.file=/mnt/config/loki-config.yml
    restart: always

volumes:
  service_data:
    driver: local
  grafana-storage: